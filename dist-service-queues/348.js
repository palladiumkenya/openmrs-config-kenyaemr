/*! For license information please see 348.js.LICENSE.txt */
(globalThis.webpackChunk_openmrs_esm_service_queues_app=globalThis.webpackChunk_openmrs_esm_service_queues_app||[]).push([[348,3373],{348:(e,t,n)=>{"use strict";n.r(t),n.d(t,{addNewQueueServiceRoomWorkspace:()=>B,addNewQueueServiceWorkspace:()=>O,addOrMoveModal:()=>Q,addProviderToRoomModal:()=>C,callQueueEntryModal:()=>N,clearAllQueueEntriesModal:()=>T,createQueueEntryWorkspace:()=>R,deleteQueueEntryModal:()=>P,editQueueEntryModal:()=>L,importTranslation:()=>A,metricsCardAverageWaitTime:()=>j,metricsCardCheckedInPatients:()=>S,metricsCardWaitingPatients:()=>q,moveQueueEntryModal:()=>I,outpatientSideNav:()=>v,pastVisitSummary:()=>U,patientBannerQueueEntryStatus:()=>x,queueList:()=>b,queueTableByStatusMenu:()=>h,queueTableByStatusView:()=>_,removeQueueEntryModal:()=>k,root:()=>m,serviceQueuesDashboardLink:()=>g,startupApp:()=>W,transitionOverflowMenuItem:()=>M,transitionQueueEntryModal:()=>w,undoTransitionQueueEntryModal:()=>D,visitFormQueueFields:()=>E});var i=n(38254),o=n(28063),r=n(90380),a=n.n(r),u=n(53373),s=n.n(u),l=n(8877),c=n(93150);function d(e){var t=e.dashboardLinkConfig,n=(0,c.useTranslation)().t,o=t.name,u=(t.title,(0,l.useLocation)()),d="".concat(window.spaBase,"/home"),f=(0,r.useMemo)(function(){var e=u.pathname.split("/home"),t=e[e.length-1];return decodeURIComponent(t)},[u.pathname]);return a().createElement(i.ConfigurableLink,{className:s()("cds--side-nav__link",{"active-left-nav-link":f.match(o)}),to:"".concat(d,"/").concat(o)},n("serviceQueues","Service queues"))}var f,A=n(84767),p="@openmrs/esm-service-queues-app",y={featureName:"outpatient",moduleName:p},m=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(1714),n.e(5434),n.e(8010),n.e(3683),n.e(582),n.e(2206),n.e(4316)]).then(n.bind(n,54316))},y),h=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(8010),n.e(1176)]).then(n.bind(n,81176))},y),_=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(1714),n.e(5434),n.e(8010),n.e(3683)]).then(n.bind(n,43683))},y),b=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(5434),n.e(2206),n.e(7967)]).then(n.bind(n,62206))},y),v=(0,i.getAsyncLifecycle)(function(){return n.e(4984).then(n.bind(n,74984))},y),g=(0,i.getSyncLifecycle)((f={name:"service-queues",slot:"service-queues-dashboard-slot",title:"Service queues"},function(){return a().createElement(l.BrowserRouter,null,a().createElement(d,{dashboardLinkConfig:f}))}),y),T=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(3344)]).then(n.bind(n,13344))},{featureName:"clear all queue entries and end visits",moduleName:p}),U=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(5434),n.e(8010),n.e(582),n.e(4597)]).then(n.bind(n,10582))},y),S=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(5434),n.e(5070),n.e(5967)]).then(n.bind(n,64349))},y),q=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(8010),n.e(5070),n.e(4807)]).then(n.bind(n,24807))},y),j=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(5434),n.e(5070),n.e(2726)]).then(n.bind(n,67196))},y),C=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(9559),n.e(5434),n.e(8010),n.e(3824)]).then(n.bind(n,43824))},{featureName:"add provider queue room",moduleName:p}),N=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(5702)]).then(n.bind(n,45702))},{featureName:"call queue entry",moduleName:p}),I=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(8010),n.e(5578),n.e(3728)]).then(n.bind(n,3728))},{featureName:"move queue entry",moduleName:p}),w=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(8010),n.e(5578),n.e(7618)]).then(n.bind(n,17618))},{featureName:"transition queue entry",moduleName:p}),L=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(8010),n.e(5578),n.e(7491)]).then(n.bind(n,7491))},{featureName:"edit queue entry of a patient",moduleName:p}),D=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(8561)]).then(n.bind(n,58561))},{featureName:"undo queue entry transiion of a patient",moduleName:p}),P=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(4890)]).then(n.bind(n,24890))},{featureName:"delete queue entry of a patient",moduleName:p}),k=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(1151)]).then(n.bind(n,31151))},{featureName:"remove queue entry of a patient",moduleName:p}),Q=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(9559),n.e(5434),n.e(8010),n.e(5578),n.e(1638)]).then(n.bind(n,71638))},{featureName:"add or move modal",moduleName:p}),M=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(3922)]).then(n.bind(n,73922))},{featureName:"add or move overflow menu item",moduleName:p}),O=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(9559),n.e(5434),n.e(8010),n.e(9707)]).then(n.bind(n,69707))},{featureName:"service-queues-service-form",moduleName:p}),B=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(9559),n.e(5434),n.e(8010),n.e(3386)]).then(n.bind(n,13386))},{featureName:"service-queues-queue-room-form",moduleName:p}),E=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(9559),n.e(5434),n.e(8010),n.e(7067)]).then(n.bind(n,47067))},y),R=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(9559),n.e(5434),n.e(8010),n.e(2100)]).then(n.bind(n,72100))},{featureName:"create-queue-entry-workspace",moduleName:p}),x=(0,i.getAsyncLifecycle)(function(){return Promise.all([n.e(3144),n.e(5689),n.e(6418),n.e(5434),n.e(2799)]).then(n.bind(n,2799))},{featureName:"patient-info-queue-entry-status",moduleName:p});function W(){(0,i.registerBreadcrumbs)([]),(0,i.defineConfigSchema)(p,o.Qn)}},28063:(e,t,n)=>{"use strict";n.d(t,{BH:()=>c,Qn:()=>h,cM:()=>y,RT:()=>m});var i=n(38254);const o={formUuid:{_type:i.Type.UUID,_default:"a000cb34-9ec1-4344-a1c8-f692232f6edd"},encounterTypeUuid:{_type:i.Type.UUID,_default:"67a71486-1a54-468f-ac3e-7091a9a79584"}},r={bmiUnit:{_type:i.Type.String,_default:"kg / mÂ²"}};function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function u(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var s=["actions","coming-from","extension","patient-age","patient-identifier","patient-name","priority","queue-number","queue","status","visit-start-time","wait-time"],l=["move","call","edit","transition","remove","delete","undo"],c=s.filter(function(e){return"extension"!==e}),d="05a29f94-c0ed-11e2-94be-8c13b969e334",f="f4620bfa-3625-4883-bd3f-84c2cce14470",A="04f6f7e0-e3cb-4e13-a133-4479f759574e",p=[{conceptUuid:A,style:null,color:"red"},{conceptUuid:f,style:null,color:"green"},{conceptUuid:"dc3492ef-24a5-4fd9-b58d-4fd2acf7071f",style:null,color:"orange"}],y={actions:{buttons:["call"],overflowMenu:["move","transition","edit","remove","undo"]},identifierTypeUuid:d,statusConfigs:[],visitQueueNumberAttributeUuid:null},m={columns:["patient-name","coming-from","priority","status","queue","wait-time","actions"],appliedTo:[{queue:"",status:""}]},h={priorityConfigs:{_type:i.Type.Array,_default:p,_description:"Add entries to configure the styling for specific priority tags.",_elements:{conceptUuid:{_type:i.Type.UUID,_description:"The UUID of the priority concept to configure"},color:{_type:i.Type.String,_description:'The color of the tag. This is based on the "type" field of the Carbon Design System "Tag" component.',_validators:[i.validators.oneOf(["red","magenta","purple","blue","teal","cyan","gray","orange","green","warm-gray","cool-gray","high-contrast","outline"])],_default:"gray"},style:{_type:i.Type.String,_description:"Style to apply to the tag",_validators:[i.validators.oneOf(["bold"])],_default:null}}},appointmentStatuses:{_type:i.Type.Array,_description:"Configurable appointment status (status of appointments)",_default:["Requested","Scheduled","CheckedIn","Completed","Cancelled","Missed"]},biometrics:r,concepts:{defaultPriorityConceptUuid:{_type:i.Type.ConceptUuid,_description:"The UUID of the default priority for the queues eg Not urgent.",_default:f},defaultStatusConceptUuid:{_type:i.Type.ConceptUuid,_description:"The UUID of the default status for the queues eg Waiting.",_default:"51ae5e4d-b72b-4912-bf31-a17efb690aeb"},defaultTransitionStatus:{_type:i.Type.ConceptUuid,_description:"The UUID of the default status for attending a service in the queues eg In Service.",_default:"ca7494ae-437f-4fd0-8aae-b88b9a2ba47d"},systolicBloodPressureUuid:{_type:i.Type.ConceptUuid,_default:"5085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},diastolicBloodPressureUuid:{_type:i.Type.ConceptUuid,_default:"5086AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},emergencyPriorityConceptUuid:{_type:i.Type.ConceptUuid,_description:"The UUID of the priority with the highest sort weight for the queues eg Emergency.",_default:A},heightUuid:{_type:i.Type.ConceptUuid,_default:"5090AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},historicalObsConceptUuid:{_type:i.Type.Array,_description:"The Uuids of the obs that are displayed on the previous visit modal",_default:["161643AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]},oxygenSaturationUuid:{_type:i.Type.ConceptUuid,_default:"5092AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},pulseUuid:{_type:i.Type.ConceptUuid,_default:"5087AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},respiratoryRateUuid:{_type:i.Type.ConceptUuid,_default:"5242AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},temperatureUuid:{_type:i.Type.ConceptUuid,_default:"5088AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"},weightUuid:{_type:i.Type.ConceptUuid,_default:"5089AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"}},contactAttributeType:{_type:i.Type.UUID,_description:"The UUID of the person attribute type that captures contact information such as `Next of kin contact details`",_default:""},customPatientChartUrl:{_type:i.Type.String,_default:"${openmrsSpaBase}/patient/${patientUuid}/chart",_description:"Template URL that will be used when clicking on the patient name in the queues table.\n      Available arguments: patientUuid, openmrsSpaBase, openBase\n      (openmrsSpaBase and openBase are available to any <ConfigurableLink>)",_validators:[i.validators.isUrlWithTemplateParameters(["patientUuid"])]},dashboardTitle:{_type:i.Type.Object,_description:"The title to be displayed on the service queues dashboard",key:{_type:i.Type.String,_description:"The translation key of the title to be displayed on the service queues dashboard"},value:{_type:i.Type.String,_description:"The translation value of the title to be displayed on the service queues dashboard"},_default:{key:"serviceQueues",value:"Service queues"}},defaultFacilityUrl:{_type:i.Type.String,_default:"",_description:"Custom URL to load default facility if it is not in the session"},defaultIdentifierTypes:{_type:i.Type.Array,_element:{_type:i.Type.String},_description:"The identifier types to be display on all patient search result page",_default:["05ee9cf4-7242-4a17-b4d4-00f707265c8a","f85081e2-b4be-4e48-b3a4-7994b69bb101"]},defaultInitialServiceQueue:{_type:i.Type.String,_description:"The name of the default service queue to be selected when the start visit form is opened",_default:"Outpatient Triage"},queueTables:{columnDefinitions:{_type:i.Type.Array,_default:[],_description:"Custom columns for queue tables can be defined here. These columns will be referenced by their `id` in the `tableDefinitions` columns configuration. If the provided `id` matches a built-in column, the custom configuration will override the built-in column's configuration.",_elements:{_validators:[(0,i.validator)(function(e){return Boolean(e.columnType||s.some(function(t){return t==e.id}))},function(e){return"No columnType provided for column with ID '".concat(e.id,"', and the ID is not a valid columnType. Valid column types are: ").concat(s.join(", "),".")}),(0,i.validator)(function(e){return e.config.identifierTypeUuid==d||_(e,"patient-identifier")},function(e){var t;return"Identifier type can only be set for 'patient-identifier' column type. Column ".concat(e.id," has type '").concat(null!==(t=e.columnType)&&void 0!==t?t:e.id,".")}),(0,i.validator)(function(e){return!e.config.statusConfigs||0==e.config.statusConfigs.length||_(e,"status")},function(e){var t;return"Statuses can only be configured for 'status' column type. Column ".concat(e.id," has type '").concat(null!==(t=e.columnType)&&void 0!==t?t:e.id)})],id:{_type:i.Type.String,_description:"The unique identifier for the column you are defining"},columnType:{_type:i.Type.String,_description:"The type of column, if different from the ID",_validators:[i.validators.oneOf(s)],_default:null},header:{_type:i.Type.String,_description:"The header text for the column. Will be translated if it is a valid translation key. If not provided, the header will be based on the columnType.",_default:null},config:{actions:{buttons:{_type:i.Type.Array,_default:["call"],_description:'For columnType "actions". Configures the buttons to display in the action cell. It is recommended to only use one, and put the rest in the overflow menu. Valid actions are: '+l.join(", "),_elements:{_type:i.Type.String,_validators:[i.validators.oneOf(l)]}},overflowMenu:{_type:i.Type.Array,_default:["edit","remove","undo"],_description:'For columnType "actions". Configures the items to display in the overflow menu. Valid actions are: '+l.join(", "),_elements:{_type:i.Type.String,_validators:[i.validators.oneOf(l)]}}},identifierTypeUuid:{_type:i.Type.UUID,_description:"For columnType 'patient-identifier'. The UUID of the identifier type to display",_default:d},statusConfigs:{_type:i.Type.Array,_default:[],_description:'For columnType "status". Configures the icons for each status.',_elements:{conceptUuid:{_type:i.Type.UUID,_description:"The UUID of the status concept to configure"},iconComponent:{_type:i.Type.String,_description:"The icon component to display for the status",_validators:[i.validators.oneOf(["Group","InProgress"])],_default:null}},visitQueueNumberAttributeUuid:{_type:i.Type.String,_description:"The UUID of the visit attribute that contains the visit queue number. This must be set to use the queue-number column if the top-level `visitQueueNumberAttributeUuid` config element is not set.",_default:null}}}}},tableDefinitions:{_type:i.Type.Array,_default:[m],_elements:{columns:{_type:i.Type.Array,_elements:{_type:i.Type.String}},appliedTo:{_type:i.Type.Array,_elements:{queue:{_type:i.Type.String,_description:"The UUID of the queue. If blank, applies to all queues.",_default:""},status:{_type:i.Type.String,_description:"The UUID of the status. If blank, applies to all statuses.",_default:""}}}}},_validators:[(0,i.validator)(function(e){var t=u(c).concat(u(e.columnDefinitions.map(function(e){return e.id})));return e.tableDefinitions.every(function(e){return e.columns.every(function(e){return t.includes(e)})})},function(e){var t=new Set(u(c).concat(u(e.columnDefinitions.map(function(e){return e.id}))));return"A table definition references a column that is not defined. You can define additional columns in 'columnDefinitions'.\n\nCurrently defined column IDs are ".concat(u(t).join(", "),".\n\nInvalid columns: ").concat(e.tableDefinitions.map(function(e){return e.columns.filter(function(e){return!t.has(e)})}).flat().join(", "))})]},showRecommendedVisitTypeTab:{_type:i.Type.Boolean,_description:"Whether start visit form should display recommended visit type tab. Requires `visitTypeResourceUrl`",_default:!1},visitQueueNumberAttributeUuid:{_type:i.Type.String,_description:"The UUID of the visit attribute that contains the visit queue number.",_default:null},visitTypeResourceUrl:{_type:i.Type.String,_description:"The `visitTypeResourceUrl`",_default:null},vitals:o,_validators:[(0,i.validator)(function(e){var t=u(e.queueTables.columnDefinitions.filter(function(e){return _(e,"queue-number")})).concat([{id:"queue-number",config:y}]),n=e.queueTables.tableDefinitions.map(function(e){return e.columns}).flat().filter(function(e){return t.map(function(e){return e.id}).includes(e)});return Boolean(e.visitQueueNumberAttributeUuid||n.every(function(e){return t.find(function(t){return t.id==e}).config.visitQueueNumberAttributeUuid}))},"If a queue-number column is used in a table definition, the `visitQueueNumberAttributeUuid` must be set either at the top-level config or in the column definition.")]};function _(e,t){return e.columnType===t||e.id===t}},53373:(e,t)=>{var n;!function(){"use strict";var i={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=a(e,r(n)))}return e}function r(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)i.call(e,n)&&e[n]&&(t=a(t,n));return t}function a(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},84767:(e,t,n)=>{var i={"./am.json":[81197,1197],"./ar.json":[14132,4132],"./ar_SY.json":[37617,7617],"./bn.json":[77159,7159],"./de.json":[34944,4944],"./en.json":[34300,4300],"./en_US.json":[59569,9569],"./es.json":[93099,3099],"./es_MX.json":[88349,8349],"./fr.json":[94055,4055],"./he.json":[84652,4652],"./hi.json":[36840,6840],"./hi_IN.json":[55442,5442],"./id.json":[72690,2690],"./it.json":[9538,9538],"./ka.json":[70795,795],"./km.json":[54335,4335],"./ku.json":[9895,9895],"./ky.json":[88163,8163],"./lg.json":[64618,4618],"./ne.json":[12146,2146],"./pl.json":[41119,1119],"./pt.json":[96679,6679],"./pt_BR.json":[36468,6468],"./qu.json":[35173,5173],"./ro_RO.json":[46022,6022],"./ru_RU.json":[60986,986],"./si.json":[56859,6859],"./sw.json":[89913,9913],"./sw_KE.json":[88618,8618],"./tr.json":[55241,5241],"./tr_TR.json":[99900,9900],"./uk.json":[60723,723],"./uz.json":[43584,3584],"./uz@Latn.json":[27097,7097],"./uz_UZ.json":[70890,890],"./vi.json":[79214,9214],"./zh.json":[35661,5661],"./zh_CN.json":[99879,9879]};function o(e){if(!n.o(i,e))return Promise.resolve().then(()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t});var t=i[e],o=t[0];return n.e(t[1]).then(()=>n(o))}o.keys=()=>Object.keys(i),o.id=84767,e.exports=o}}]);