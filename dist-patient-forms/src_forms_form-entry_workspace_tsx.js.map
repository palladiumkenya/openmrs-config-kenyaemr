{"version":3,"file":"src_forms_form-entry_workspace_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA4D;AAC4B;AAM/C;AAQzC,IAAMQ,YAA+C;QACnDC,oBAAAA,aACAC,gBAAAA,mDACAC,4BAAAA,4EAA6BL,mFAAsBA,sCACnDM,uBAAAA,gBACAC,uCAAAA,gCACAC,4BAAAA,qBACAC,mBAAAA,YACAC,iBAAAA;QAuCIC;IArCJ,IACED,OAAAA,YAAY,CAAC,GADPE,gBACNF,KADME,eAAeC,WACrBH,KADqBG,UAAUC,qBAC/BJ,KAD+BI,oBAAoBC,oBACnDL,KADmDK,mBAAmBC,gBACtEN,KADsEM,eAAeC,YACrFP,KADqFO,WAAWC,kBAChGR,KADgGQ;IAElG,IAAM,eAAmBjB,uFAAsBA,CAACE,aAAxCQ;IACR,IAAgCd,6BAAAA,+CAAQA,CAAC,WAAlCsB,WAAyBtB,cAAfuB,cAAevB;IAChC,IAAMwB,WAAWtB,uEAAeA;IAChC,IAAMuB,QAAQ1B,8CAAOA,CACnB;YAIkCe;YADrBM,MACID,OACKF,OACDC;eANd;YACLQ,MAAM;YACNV,UAAUA,qBAAAA,sBAAAA,WAAY;YACtBI,WAAWA,CAAAA,OAAAA,sBAAAA,uBAAAA,YAAaN,yBAAAA,mCAAAA,aAAca,IAAI,cAA/BP,kBAAAA,OAAmC;YAC9CD,eAAeA,CAAAA,QAAAA,0BAAAA,2BAAAA,gBAAiBL,yBAAAA,oCAAAA,0BAAAA,aAAcc,SAAS,cAAvBd,8CAAAA,wBAAyBa,IAAI,cAA9CR,mBAAAA,QAAkD;YACjEF,oBAAoBA,CAAAA,QAAAA,+BAAAA,gCAAAA,qBAAsBH,yBAAAA,mCAAAA,aAAce,aAAa,cAAjDZ,mBAAAA,QAAqD;YACzEC,mBAAmBA,CAAAA,QAAAA,8BAAAA,+BAAAA,oBAAqBJ,yBAAAA,mCAAAA,aAAcgB,YAAY,cAA/CZ,mBAAAA,QAAmD;YACtEa,WAAW,CAACP;YACZlB,aAAaA,wBAAAA,yBAAAA,cAAe;YAC5BC,SAAAA;YACAQ,eAAeA,0BAAAA,2BAAAA,gBAAiB;YAChCN,gBAAgB;gBACd,OAAOG,eAAe,cAAcA;gBACpCH;YACF;YACAC,gCAAgC;gBAC9B,OAAOE,eAAe,cAAcA;gBACpCF;YACF;YACAC,qBAAAA;YACAU,iBAAAA;YACAb,4BAAAA;QACF;IAAA,GACA;QACEQ;QACAI;QACAD;QACAJ;QACAE;QACAC;QACAJ,yBAAAA,mCAAAA,aAAca,IAAI;QAClBb,yBAAAA,oCAAAA,0BAAAA,aAAcc,SAAS,cAAvBd,8CAAAA,wBAAyBa,IAAI;QAC7Bb,yBAAAA,mCAAAA,aAAce,aAAa;QAC3Bf,yBAAAA,mCAAAA,aAAcgB,YAAY;QAC1BxB;QACAC;QACAiB;QACAZ;QACAH;QACAC;QACAC;QACAU;QACAb;KACD;IAGH,oKAAoK;IACpKV,gDAASA,CAAC;QACR,IAAI2B,MAAMT,QAAQ,EAAE;YAClBO,YAAY;YACZS,WAAW;gBACTT,YAAY;YACd;QACF;IACF,GAAG;QAACE;KAAM;IAEV,qBACE,2DAACQ,2BACC,2DAAChC,iEAAaA;QAACiC,MAAK;QAA4BT,OAAO;YAAEnB,aAAAA;QAAY;QACpEgB,YAAYT,YAAYP,eAAeC,yBAAW,2DAACN,iEAAaA;QAACiC,MAAK;QAAmBT,OAAOA;;AAGvG;AAEA,iEAAepB,SAASA,EAAC","sources":["webpack://@openmrs/esm-patient-forms-app/./src/forms/form-entry.workspace.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { ExtensionSlot, useConnectivity, useFeatureFlag } from '@openmrs/esm-framework';\nimport {\n  clinicalFormsWorkspace,\n  type DefaultPatientWorkspaceProps,\n  type FormEntryProps,\n  useVisitOrOfflineVisit,\n} from '@openmrs/esm-patient-common-lib';\n\ninterface FormEntryComponentProps extends DefaultPatientWorkspaceProps {\n  mutateForm: () => void;\n  formInfo: FormEntryProps;\n  clinicalFormsWorkspaceName?: string;\n}\n\nconst FormEntry: React.FC<FormEntryComponentProps> = ({\n  patientUuid,\n  patient,\n  clinicalFormsWorkspaceName = clinicalFormsWorkspace,\n  closeWorkspace,\n  closeWorkspaceWithSavedChanges,\n  promptBeforeClosing,\n  mutateForm,\n  formInfo,\n}) => {\n  const { encounterUuid, formUuid, visitStartDatetime, visitStopDatetime, visitTypeUuid, visitUuid, additionalProps } =\n    formInfo || {};\n  const { currentVisit } = useVisitOrOfflineVisit(patientUuid);\n  const [showForm, setShowForm] = useState(true);\n  const isOnline = useConnectivity();\n  const state = useMemo(\n    () => ({\n      view: 'form',\n      formUuid: formUuid ?? null,\n      visitUuid: visitUuid ?? currentVisit?.uuid ?? null,\n      visitTypeUuid: visitTypeUuid ?? currentVisit?.visitType?.uuid ?? null,\n      visitStartDatetime: visitStartDatetime ?? currentVisit?.startDatetime ?? null,\n      visitStopDatetime: visitStopDatetime ?? currentVisit?.stopDatetime ?? null,\n      isOffline: !isOnline,\n      patientUuid: patientUuid ?? null,\n      patient,\n      encounterUuid: encounterUuid ?? null,\n      closeWorkspace: () => {\n        typeof mutateForm === 'function' && mutateForm();\n        closeWorkspace();\n      },\n      closeWorkspaceWithSavedChanges: () => {\n        typeof mutateForm === 'function' && mutateForm();\n        closeWorkspaceWithSavedChanges();\n      },\n      promptBeforeClosing,\n      additionalProps,\n      clinicalFormsWorkspaceName,\n    }),\n    [\n      formUuid,\n      visitUuid,\n      visitTypeUuid,\n      encounterUuid,\n      visitStartDatetime,\n      visitStopDatetime,\n      currentVisit?.uuid,\n      currentVisit?.visitType?.uuid,\n      currentVisit?.startDatetime,\n      currentVisit?.stopDatetime,\n      patientUuid,\n      patient,\n      isOnline,\n      mutateForm,\n      closeWorkspace,\n      closeWorkspaceWithSavedChanges,\n      promptBeforeClosing,\n      additionalProps,\n      clinicalFormsWorkspaceName,\n    ],\n  );\n\n  // FIXME: This logic triggers a reload of the form when the formUuid changes. It's a workaround for the fact that the form doesn't reload when the formUuid changes.\n  useEffect(() => {\n    if (state.formUuid) {\n      setShowForm(false);\n      setTimeout(() => {\n        setShowForm(true);\n      });\n    }\n  }, [state]);\n\n  return (\n    <div>\n      <ExtensionSlot name=\"visit-context-header-slot\" state={{ patientUuid }} />\n      {showForm && formInfo && patientUuid && patient && <ExtensionSlot name=\"form-widget-slot\" state={state} />}\n    </div>\n  );\n};\n\nexport default FormEntry;\n"],"names":["React","useEffect","useMemo","useState","ExtensionSlot","useConnectivity","clinicalFormsWorkspace","useVisitOrOfflineVisit","FormEntry","patientUuid","patient","clinicalFormsWorkspaceName","closeWorkspace","closeWorkspaceWithSavedChanges","promptBeforeClosing","mutateForm","formInfo","currentVisit","encounterUuid","formUuid","visitStartDatetime","visitStopDatetime","visitTypeUuid","visitUuid","additionalProps","showForm","setShowForm","isOnline","state","view","uuid","visitType","startDatetime","stopDatetime","isOffline","setTimeout","div","name"],"sourceRoot":""}